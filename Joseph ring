/*	约瑟夫环问题  
对于N个数，每次报数第M个人出队，从0开始报数则M-1号出队，然后接着从0开始报数直到所有人出队；
假设当前队中有N个人，则出队的人是 K=(M-1) % N，则余下的人从0开始重新编号，则K+1->0,K+2->1,K+3->2.....N-1->N-K-2,0->N-K-1...K-1->N-2
设出队前编号为X   出对后重新编号为Y
Y=(N-K-1+X)%N = (N-1-((M-1)%N)+X)%N = (N-M+X)%N = (X-M)%N
X的取值范围为 [0,N-1],且X不能取K,
则  逆变换为  X = (Y+M)%N
另外对于一个长度为P的队列，以模M循环报数则第一个出来的需要为 (M-1)%P
则每次不同长度的序列第一次出队序号已知的情况下，可以通过上式逐层递推得到在原始队列中的序号；
*/
#include <iostream>
#include <vector>
int main(){
	int N, M;
	cin >> N >> M;
	vector<int> out;
	out.push_back(((M - 1) % N) + 1);
	for (int i = 1; i<N; i++) {
		int last = (M - 1)%(N-i);
		for (int j = N - i + 1; j <= N; j++) {
			last = (last + M) % j;
		}
		out.push_back(last + 1);
	}
	int n = out.size();
	for (int i = 0; i<n - 1; i++) {
		cout << out[i] << " ";
	}
	cout << out[n - 1];
	return 0;
}
